#include "arduino_secrets.h"
/* 
  Sketch generated by the Arduino IoT Cloud Thing "Scheduler Testing"
  https://create.arduino.cc/cloud/things/13a48959-b611-4608-a1e8-fd08e1b0b5fb 

  Arduino IoT Cloud Variables description

  The following variables are automatically generated and updated when changes are made to the Thing

  bool curtainStatus;
  CloudTime timeClose;
  CloudTime timeNow;
  CloudTime timeOpen;
  CloudTime time_read;

  Variables which are marked as READ/WRITE in the Cloud Thing will also have functions
  which are called when their values are changed from the Dashboard.
  These functions are generated with the Thing and added at the end of this sketch.
*/

#include "thingProperties.h"
#include <RTCZero.h>

//assign variables to pins
int enable = 5;
int in1 = 4;
int in2 = 3;

//set motor characteristics
int mSpeed = 200;
int curtainMoveTime = 1000;   //time to run motor for - still need to determine

void setup() {
  // Initialize serial and wait for port to open:
  Serial.begin(9600);
  // This delay gives the chance to wait for a Serial Monitor without blocking if none is found
  delay(1500); 

  // Defined in thingProperties.h
  initProperties();

  // Connect to Arduino IoT Cloud
  ArduinoCloud.begin(ArduinoIoTPreferredConnection);
  
  /*
     The following function allows you to obtain more information
     related to the state of network and IoT Cloud connection and errors
     the higher number the more granular information youâ€™ll get.
     The default is 0 (only errors).
     Maximum is 4
 */
  setDebugMessageLevel(2);
  ArduinoCloud.printDebugInfo();
  
  //set pins to outputs
  pinMode(enable, OUTPUT);
  pinMode(in1, OUTPUT);
  pinMode(in2, OUTPUT);
  
  curtainStatus = false;
}

void loop() {
  ArduinoCloud.update();
  // Your code here 
  
  if(ArduinoCloud.connected()){
    //get and display local time
     time_read = ArduinoCloud.getLocalTime();
     
    //convert so comparable
     timeNow = time_read % (3600 * 24);
     
     //check if want open or closed
     if(timeNow > timeOpen && timeNow < timeClose && !curtainStatus == true){
      //CLOCKWISE rotation - open
      digitalWrite(in1,HIGH);
      digitalWrite(in2,LOW);
      analogWrite(enable, mSpeed);
      delay(curtainMoveTime);
    
      //STOP
      digitalWrite(in1,LOW);
      digitalWrite(in2,LOW);
       
      curtainStatus = true;
     }
     else if (timeNow > timeClose && !curtainStatus == false){
       //COUNTER-CLOCKWISE rotation - close?
      digitalWrite(in1,LOW);
      digitalWrite(in2,HIGH);
      analogWrite(enable, mSpeed);
      delay(curtainMoveTime);
    
      //STOP
      digitalWrite(in1,LOW);
      digitalWrite(in2,LOW);
       
       curtainStatus = false;
     }
     
  }
  
}


/*
  Since TimeOpen is READ_WRITE variable, onTimeOpenChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onTimeOpenChange()  {
  // Add your code here to act upon TimeOpen change
}


/*
  Since TimeNow is READ_WRITE variable, onTimeNowChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onTimeNowChange()  {
  // Add your code here to act upon TimeNow change
}


/*
  Since TimeClose is READ_WRITE variable, onTimeCloseChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onTimeCloseChange()  {
  // Add your code here to act upon TimeClose change
}